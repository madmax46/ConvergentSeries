if line=="STARTING BATCH":
			#Enable the recording
			is_recording = True
			#Reset the buffer
			output = []
			print("RECORDING..."),
		elif line=="CLOSING BATCH": #Stops recording and analyzes the result
			#Disable recording
			is_recording = False
			if len(output)>1: #If less than 1, it means error
				print("DONE, SAVING..."),

				#If TARGET_ALL_MODE is enabled changes the target sign
				#according to the position
				if TARGET_ALL_MODE:
					if current_test_index<len(test_sentence):
						target_sign = test_sentence[current_test_index]
					else:
						#At the end of the sentence, it quits
						print("Target All Ended!")
						quit()

				#Generates the filename based on the target sign, batch and progressive number
				filename = "{sign}_sample_{batch}_{number}.txt".format(sign = target_sign, batch = current_batch, number = current_sample)
				#Generates the path
				path = target_directory + os.sep + filename
				
				#If SAVE_NEW_SAMPLES is False, it saves the recording to a temporary file
				if SAVE_NEW_SAMPLES == False:
					path = "tmp.txt"
					filename = "tmp.txt"

				#Saves the recording in a file
				f = open(path, "w")
				f.write('\n'.join(output))
				f.close()
				print("SAVED IN {filename}".format(filename = filename))

				current_sample += 1

				#If TRY_TO_PREDICT is True, it utilizes the model to predict the recording
				if TRY_TO_PREDICT:
					print("PREDICTING...")
					#It loads the recording as a Sample object
					sample_test = signals.Sample.load_from_file(path)

					linearized_sample = sample_test.get_linearized(reshape=True)
					#Predict the number with the machine learning model
					number = clf.predict(linearized_sample)
					#Convert it to a char
					char = chr(ord('a')+number[0])

					#Get the last word in the sentence
					last_word = sentence.split(" ")[-1:][0]

					#If AUTOCORRECT is True, the cross-calculated char will override the predicted one
					if AUTOCORRECT and char.islower():
						predicted_char = hinter.most_probable_letter(clf, classes, linearized_sample, last_word)
						if predicted_char is not None:
							print("CURRENT WORD: {word}, PREDICTED {old}, CROSS_CALCULATED {new}".format(word = last_word, old = char, new = predicted_char))
							char = predicted_char
					
					#If the mode is WRITE, assigns special meanings to some characters
					#and builds a sentence with each char
					if ENABLE_WRITE:
						if char == 'D': #Delete the last character
							sentence = sentence[:-1]
						elif char == 'A': #Delete all characters
							if DELETE_ALL_ENABLED:
								sentence = ""
							else:
								print("DELETE_ALL_ENABLED = FALSE")
						else: #Add the char to the sentence
							sentence += char
						#Prints the last char and the sentence
						print("[{char}] -> {sentence}".format(char = char, sentence = sentence))
						#Saves the output to a file
						output_file = open("output.txt","w")
						output_file.write(sentence)
						output_file.close()
					else:
						print(char)
			else: #In case of a corrupted sequence
				print("ERROR...")
				current_test_index -= 1

			#If TARGET_ALL_MODE=True it shows the current position in the sentence
			if TARGET_ALL_MODE:
				current_test_index += 1
				print_sentence_with_pointer(test_sentence, current_test_index)
		else:
			#Append the current signal line in the recording
			output.append(line)











if is_have_changes == True:
				now = time.time()
				diff = now - dt_start

				if diff < 1:
					dt_start = time.time()
					output.clear()
					last_data = None
					continue
